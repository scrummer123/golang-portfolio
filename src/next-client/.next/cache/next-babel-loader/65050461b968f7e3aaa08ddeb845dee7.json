{"ast":null,"code":"var _jsxFileName = \"/home/simon/Development/go/src/github.com/scrummer123/golang-portfolio/src/next-client/pages/_app.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport cookies from \"next-cookies\";\nimport { ThemeProvider, CSSReset, ColorModeProvider } from \"@chakra-ui/core\";\nimport { ColorModeProvider as MyColorModeProvider } from \"../Handlers/ColorModeProvider\";\nimport Layout from \"../Components/Layout\";\n\nconst App = ({\n  Component,\n  pageProps\n}) => {\n  return __jsx(ThemeProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, __jsx(ColorModeProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, __jsx(MyColorModeProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }\n  }, __jsx(CSSReset, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 21\n    }\n  }), __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 25\n    }\n  }))))));\n};\n\nApp.getInitialProps = async ({\n  Component,\n  ctx\n}) => {\n  let pageProps = {};\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  const {\n    isDarkMode = \"false\"\n  } = cookies(ctx);\n  return {\n    pageProps,\n    initialColorMode: isDarkMode === \"true\" ? \"dark\" : \"light\"\n  };\n};\n\nexport default App;","map":{"version":3,"sources":["/home/simon/Development/go/src/github.com/scrummer123/golang-portfolio/src/next-client/pages/_app.tsx"],"names":["cookies","ThemeProvider","CSSReset","ColorModeProvider","MyColorModeProvider","Layout","App","Component","pageProps","getInitialProps","ctx","isDarkMode","initialColorMode"],"mappings":";;;;;;AACA,OAAOA,OAAP,MAAoB,cAApB;AAEA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,iBAAlC,QAA2D,iBAA3D;AACA,SAASA,iBAAiB,IAAIC,mBAA9B,QAAyD,+BAAzD;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAwC;AAChD,SACI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,CAFJ,CADJ,CADJ,CADJ;AAYH,CAbD;;AAeAF,GAAG,CAACG,eAAJ,GAAsB,OAAO;AAAEF,EAAAA,SAAF;AAAaG,EAAAA;AAAb,CAAP,KAA8B;AAChD,MAAIF,SAAS,GAAG,EAAhB;;AACA,MAAID,SAAS,CAACE,eAAd,EAA+B;AAC3BD,IAAAA,SAAS,GAAG,MAAMD,SAAS,CAACE,eAAV,CAA0BC,GAA1B,CAAlB;AACH;;AACD,QAAM;AAAEC,IAAAA,UAAU,GAAG;AAAf,MAA2BX,OAAO,CAACU,GAAD,CAAxC;AACA,SAAO;AACHF,IAAAA,SADG;AAEHI,IAAAA,gBAAgB,EAAED,UAAU,KAAK,MAAf,GAAwB,MAAxB,GAAiC;AAFhD,GAAP;AAIH,CAVD;;AAYA,eAAeL,GAAf","sourcesContent":["import { AppProps } from \"next/app\";\nimport cookies from \"next-cookies\";\n\nimport { ThemeProvider, CSSReset, ColorModeProvider } from \"@chakra-ui/core\";\nimport { ColorModeProvider as MyColorModeProvider } from \"../Handlers/ColorModeProvider\";\nimport Layout from \"../Components/Layout\";\n\nconst App = ({ Component, pageProps }: AppProps) => {\n    return (\n        <ThemeProvider>\n            <ColorModeProvider>\n                <MyColorModeProvider>\n                    <CSSReset />\n                    <Layout>\n                        <Component {...pageProps} />\n                    </Layout>\n                </MyColorModeProvider>\n            </ColorModeProvider>\n        </ThemeProvider>\n    );\n};\n\nApp.getInitialProps = async ({ Component, ctx }) => {\n    let pageProps = {};\n    if (Component.getInitialProps) {\n        pageProps = await Component.getInitialProps(ctx);\n    }\n    const { isDarkMode = \"false\" } = cookies(ctx);\n    return {\n        pageProps,\n        initialColorMode: isDarkMode === \"true\" ? \"dark\" : \"light\",\n    };\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}