{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/simon/Development/go/src/github.com/scrummer123/golang-portfolio/src/next-client/Providers/DarkModeProvider.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { createContext, useState, useEffect } from \"react\";\nexport var DarkModeContext = createContext(\"light\");\nexport var DarkModeProvider = function DarkModeProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(\"light\"),\n      darkMode = _useState[0],\n      setDarkMode = _useState[1];\n\n  useEffect(function () {\n    return console.log(darkMode);\n  }, [darkMode]);\n  return __jsx(DarkModeContext.Provider, {\n    value: \"dark\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, children);\n};\n\n_s(DarkModeProvider, \"sL+EVMZWPzadcJB6WbDiwu7A4g0=\");\n\n_c = DarkModeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DarkModeProvider\");","map":{"version":3,"sources":["/home/simon/Development/go/src/github.com/scrummer123/golang-portfolio/src/next-client/Providers/DarkModeProvider.tsx"],"names":["React","createContext","useState","useEffect","DarkModeContext","DarkModeProvider","children","darkMode","setDarkMode","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AAEA,OAAO,IAAMC,eAAe,GAAGH,aAAa,CAAmB,OAAnB,CAArC;AAEP,OAAO,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACdJ,QAAQ,CAAmB,OAAnB,CADM;AAAA,MACvCK,QADuC;AAAA,MAC7BC,WAD6B;;AAG9CL,EAAAA,SAAS,CAAC;AAAA,WAAMM,OAAO,CAACC,GAAR,CAAYH,QAAZ,CAAN;AAAA,GAAD,EAA8B,CAACA,QAAD,CAA9B,CAAT;AAEA,SACI,MAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,QADL,CADJ;AAKH,CAVM;;GAAMD,gB;;KAAAA,gB","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\n\nexport const DarkModeContext = createContext<\"light\" | \"dark\">(\"light\");\n\nexport const DarkModeProvider = ({ children }) => {\n    const [darkMode, setDarkMode] = useState<\"light\" | \"dark\">(\"light\");\n\n    useEffect(() => console.log(darkMode), [darkMode]);\n\n    return (\n        <DarkModeContext.Provider value=\"dark\">\n            {children}\n        </DarkModeContext.Provider>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}