{"ast":null,"code":"var _jsxFileName = \"/home/simon/Development/go/src/github.com/scrummer123/golang-portfolio/src/next-client/Handlers/ColorModeProvider.tsx\";\nvar __jsx = React.createElement;\nimport { useColorMode } from \"@chakra-ui/core\";\nimport React, { createContext, useContext } from \"react\";\nimport { useCookies } from \"react-cookie\";\nconst ColorModeContext = createContext(\"light\");\n\nconst ColorModeProvider = props => {\n  const {\n    children\n  } = props;\n  const [cookies] = useCookies([\"isDarkMode\"]);\n  const {\n    colorMode,\n    toggleColorMode\n  } = useColorMode();\n  return __jsx(ColorModeContext.Provider, {\n    value: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, children);\n};\n\nconst useDarkMode = () => useContext(ColorModeContext);\n\nexport { ColorModeProvider, useDarkMode };","map":{"version":3,"sources":["/home/simon/Development/go/src/github.com/scrummer123/golang-portfolio/src/next-client/Handlers/ColorModeProvider.tsx"],"names":["useColorMode","React","createContext","useContext","useCookies","ColorModeContext","ColorModeProvider","props","children","cookies","colorMode","toggleColorMode","useDarkMode"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,iBAA7B;AAEA,OAAOC,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AAEA,SAASC,UAAT,QAA2B,cAA3B;AAEA,MAAMC,gBAAgB,GAAGH,aAAa,CAAmB,OAAnB,CAAtC;;AAMA,MAAMI,iBAAiB,GAAIC,KAAD,IAAkB;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AAEA,QAAM,CAACE,OAAD,IAAYL,UAAU,CAAC,CAAC,YAAD,CAAD,CAA5B;AAEA,QAAM;AAAEM,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAiCX,YAAY,EAAnD;AAEA,SACI,MAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKQ,QADL,CADJ;AAKH,CAZD;;AAcA,MAAMI,WAAW,GAAG,MAAMT,UAAU,CAACE,gBAAD,CAApC;;AAEA,SAASC,iBAAT,EAA4BM,WAA5B","sourcesContent":["import { useColorMode } from \"@chakra-ui/core\";\n\nimport React, { createContext, useContext } from \"react\";\n\nimport { useCookies } from \"react-cookie\";\n\nconst ColorModeContext = createContext<\"light\" | \"dark\">(\"light\");\n\ninterface Props {\n    children: React.ReactNode;\n}\n\nconst ColorModeProvider = (props: Props) => {\n    const { children } = props;\n\n    const [cookies] = useCookies([\"isDarkMode\"]);\n\n    const { colorMode, toggleColorMode } = useColorMode();\n\n    return (\n        <ColorModeContext.Provider value=\"light\">\n            {children}\n        </ColorModeContext.Provider>\n    );\n};\n\nconst useDarkMode = () => useContext(ColorModeContext);\n\nexport { ColorModeProvider, useDarkMode };\n"]},"metadata":{},"sourceType":"module"}