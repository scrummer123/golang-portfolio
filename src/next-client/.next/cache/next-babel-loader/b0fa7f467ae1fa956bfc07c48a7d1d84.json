{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/home/simon/Development/go/src/github.com/scrummer123/golang-portfolio/src/next-client/pages/_app.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport cookies from \"next-cookies\";\nimport { ThemeProvider, CSSReset, ColorModeProvider } from \"@chakra-ui/core\";\nimport { ColorModeProvider as MyColorModeProvider } from \"../Handlers/ColorModeProvider\";\nimport Layout from \"../Components/Layout\";\n\nvar App = function App(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return __jsx(ThemeProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, __jsx(ColorModeProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }, __jsx(MyColorModeProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }\n  }, __jsx(CSSReset, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 21\n    }\n  }), __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 25\n    }\n  }))))));\n};\n\n_c = App;\n\nApp.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var Component, ctx, pageProps, _cookies, _cookies$isDarkMode, isDarkMode;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Component = _ref2.Component, ctx = _ref2.ctx;\n            pageProps = {};\n\n            if (!Component.getInitialProps) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return Component.getInitialProps(ctx);\n\n          case 5:\n            pageProps = _context.sent;\n\n          case 6:\n            _cookies = cookies(ctx), _cookies$isDarkMode = _cookies.isDarkMode, isDarkMode = _cookies$isDarkMode === void 0 ? \"false\" : _cookies$isDarkMode;\n            return _context.abrupt(\"return\", {\n              pageProps: pageProps,\n              initialColorMode: isDarkMode === \"true\" ? \"dark\" : \"light\"\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/simon/Development/go/src/github.com/scrummer123/golang-portfolio/src/next-client/pages/_app.tsx"],"names":["cookies","ThemeProvider","CSSReset","ColorModeProvider","MyColorModeProvider","Layout","App","Component","pageProps","getInitialProps","ctx","isDarkMode","initialColorMode"],"mappings":";;;;;;;;;AACA,OAAOA,OAAP,MAAoB,cAApB;AAEA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,iBAAlC,QAA2D,iBAA3D;AACA,SAASA,iBAAiB,IAAIC,mBAA9B,QAAyD,+BAAzD;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,OAAwC;AAAA,MAArCC,SAAqC,QAArCA,SAAqC;AAAA,MAA1BC,SAA0B,QAA1BA,SAA0B;AAChD,SACI,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,CAFJ,CADJ,CADJ,CADJ;AAYH,CAbD;;KAAMF,G;;AAeNA,GAAG,CAACG,eAAJ;AAAA,uEAAsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASF,YAAAA,SAAT,SAASA,SAAT,EAAoBG,GAApB,SAAoBA,GAApB;AACdF,YAAAA,SADc,GACF,EADE;;AAAA,iBAEdD,SAAS,CAACE,eAFI;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGIF,SAAS,CAACE,eAAV,CAA0BC,GAA1B,CAHJ;;AAAA;AAGdF,YAAAA,SAHc;;AAAA;AAAA,uBAKeR,OAAO,CAACU,GAAD,CALtB,iCAKVC,UALU,EAKVA,UALU,oCAKG,OALH;AAAA,6CAMX;AACHH,cAAAA,SAAS,EAATA,SADG;AAEHI,cAAAA,gBAAgB,EAAED,UAAU,KAAK,MAAf,GAAwB,MAAxB,GAAiC;AAFhD,aANW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;;AAYA,eAAeL,GAAf","sourcesContent":["import { AppProps } from \"next/app\";\nimport cookies from \"next-cookies\";\n\nimport { ThemeProvider, CSSReset, ColorModeProvider } from \"@chakra-ui/core\";\nimport { ColorModeProvider as MyColorModeProvider } from \"../Handlers/ColorModeProvider\";\nimport Layout from \"../Components/Layout\";\n\nconst App = ({ Component, pageProps }: AppProps) => {\n    return (\n        <ThemeProvider>\n            <ColorModeProvider>\n                <MyColorModeProvider>\n                    <CSSReset />\n                    <Layout>\n                        <Component {...pageProps} />\n                    </Layout>\n                </MyColorModeProvider>\n            </ColorModeProvider>\n        </ThemeProvider>\n    );\n};\n\nApp.getInitialProps = async ({ Component, ctx }) => {\n    let pageProps = {};\n    if (Component.getInitialProps) {\n        pageProps = await Component.getInitialProps(ctx);\n    }\n    const { isDarkMode = \"false\" } = cookies(ctx);\n    return {\n        pageProps,\n        initialColorMode: isDarkMode === \"true\" ? \"dark\" : \"light\",\n    };\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}